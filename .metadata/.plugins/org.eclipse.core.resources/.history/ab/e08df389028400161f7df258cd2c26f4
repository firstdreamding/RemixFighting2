package main;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

import entities.GameCharacter;
import entities.Hitbox;
import entities.HitboxController;
import entities.Hurtbox;
import entities.Player;
import graphics.Screen;
import graphics.SpriteSheet;
import graphics.Texture;
import graphics.Window;
import physics.Gravity;
import utils.FileUtils;

public class Main {

	public Main() throws Exception {

	}

	Player p1;
	Texture bg = new Texture("/res/sprites/stage1.png", 960, 540);
	SoundPlayer sp = new SoundPlayer();
	private List<GameCharacter> characters = new ArrayList<GameCharacter>();
	Texture healthPx = new Texture("/res/sprites/RedPixel.png", 350, 25);
	int timepass = 0;
	Texture snow = new Texture("/res/sprites/snowflakesheet.png", 14100, 540);
	SpriteSheet snowSheet = new SpriteSheet(snow, 960, 540);
	public int snowY = 0;
	HitboxController hbc = new HitboxController();
	KeyListener mainListen = new KeyAdapter() {
		@Override
		public void keyPressed(KeyEvent e) {
			// TODO Auto-generated method stub
			int in = e.getKeyCode();
			long now = System.currentTimeMillis();
			if (in == KeyMap.p1Up) {
				if (p1.getJumps() > 0 && now > p1.getLastJumped() + p1.getJumpLength()) {
					p1.jump(9);
					p1.setLastJumped(now);
					for (int i = 2; i >= 0; i--) {
						p1.setT(i, 1);
						pause(40);
					}
					for (int i = 0; i < 5; i++) {
						p1.setT(i, 1);
						pause(30);
					}
				}
			} else if (in == KeyMap.p1Right) {
				p1.setDir(1);
				p1.setXvel(p1.moveSpeed);
			} else if (in == KeyMap.p1Left) {
				p1.setDir(-1);
				p1.setXvel(-p1.moveSpeed);
			} else if (in == KeyMap.p1Kick) {
				if (now - p1.lastAttacked > p1.kickLag) {
					p1.setLastAttacked(now);
					for (int i = 0; i < 5; i++) {
						p1.setT(i, 2);
						p1.setX(p1.getX() + 15 * p1.dir);
						pause(50);
					}
					pause(50);
					for (int i = 4; i >= 0; i--) {
						p1.setT(i, 2);
						pause(50);
					}
				}
			} else if (in == KeyMap.p1Jab) {
				if (now > p1.getLastAttacked() + p1.getJabLag()) {

					p1.setLastAttacked(now);
					try {
						sp.play("/res/sfx/punch.wav");
					} catch (UnsupportedAudioFileException | IOException | LineUnavailableException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					for (int i = 0; i < 5; i++) {
						p1.setT(i, 0);
						p1.setX(p1.getX() + 5);
						pause(40);
					}
					pause(50);
					for (int i = 4; i >= 0; i--) {
						p1.setT(i, 0);
						p1.setX(p1.getX() - 5);
						pause(40);
					}
				}
			} else if (in == KeyMap.p1Special) {
				try {
					sp.play("/res/sfx/star.wav");
				} catch (UnsupportedAudioFileException | IOException | LineUnavailableException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}

		@Override
		public void keyReleased(KeyEvent e) {
			// TODO Auto-generated method stub
			int in = e.getKeyCode();
			if (in == KeyMap.p1Left) {
				if (p1.getDir() < 0) {
					p1.setXvel(0);
				}

			}
			if (in == KeyMap.p1Right) {
				if (p1.getDir() > 0) {
					p1.setXvel(0);
				}
			}

		}

	};

	public void pause(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	private void render(Screen screen) {
		screen.drawTexture(0, 0, bg);
		screen.drawTexture(25, 25, healthPx);
		screen.drawString(p1.name, 40, 45);
		for (Hurtbox h : hbc.getHurtboxes()) {
			screen.drawRect(h.x, h.y, h.width, h.height, 0x0000FF);
		}
		for (Hitbox hit : hbc.getHitboxes()) {
			screen.drawRect(hit.x, hit.y, hit.width, hit.height, 0xff0000);
		}
		if (timepass / 60 >= 14)
			timepass = 0;
		screen.drawTexture(0, 0, snowSheet.getTexture(timepass / 60, 0));
		timepass++;
		screen.drawTexture(p1.getX(), p1.getY(), p1.getTexture());

	}

	private void loadCharacters() {
		String basePath = "src/res/characters/";
		for (String line : FileUtils.readLinesFromFile(basePath + "characters.txt")) {
			characters.add(new GameCharacter(basePath + line + ".txt"));
		}
	}

	private void printCharacters() {
		System.out.println("Characters:\n");
		int i = 1;
		for (GameCharacter c : characters) {
			System.out.println("Character #" + i++);
			System.out.println(c.name);
			System.out.println("\tAttack: " + c.attackStrength);
			System.out.println("\tDefense: " + c.defenseStrength);
			System.out.println("\tSpeed: " + c.speed);
			System.out.println("\tHealth: " + c.health);
			System.out.println("\tJab lag: " + c.jabLag);
			System.out.println("\tJump lag: " + c.jumpLag);
			System.out.println();
		}
	}

	Hurtbox hb;

	private void loop() throws InterruptedException {

		KeyMap.init();

		Window window = new Window("Game", 960, 540);
		window.addKeyListener(mainListen);
		window.show();
		Screen screen = window.getScreen();
		Gravity g = new Gravity();
		loadCharacters();
		printCharacters();
		p1 = new Player(1, 50, 0, characters.get(0));
		hb = new Hurtbox(p1);
		hbc.addhurtbox(hb);
		hbc.addHitbox(new Hitbox(10, 300, 300, 50, 50, 0, 5000));
		System.out.println(p1.health);
		int dx = (int) (1000 / 60);
		g.addEntity(p1);

		long timeNow = System.currentTimeMillis();
		long timeLastRender = System.currentTimeMillis();
		double fps = 1000.0;
		int lag = 0;
		int test = 0;

		while (true) {

			// screen = window.getScreen();

			timeNow = System.currentTimeMillis();

			lag += (timeNow - timeLastRender) / fps;

			if (lag >= 1) {
				this.render(screen);
				System.out.println(test);
				test++;
				lag--;
				timeLastRender = System.currentTimeMillis();
				p1.update();
				hbc.update();
				screen.clear(0xffffff);
				g.update();
				window.update();
			}

			// p1.setY(535);

		}
	}

	public static void main(String[] args) throws Exception {

		Main game = new Main();
		game.loop();

	}

}
